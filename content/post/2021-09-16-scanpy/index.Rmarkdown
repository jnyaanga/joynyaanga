---
title: 'Analyzing single cell data using scanpy'
author: Joy Nyaanga
date: '2021-09-16'
slug: scanpy
categories: 
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2021-09-16T20:51:42-05:00'
featured: no
image:
  caption: '[Photo by National Cancer Institute on Unsplash](https://unsplash.com/photos/bwMhq_itmMU?utm_source=unsplash&utm_medium=referral&utm_content=creditShareLink)'
  focal_point: ''
  preview_only: no
projects: [trajectory-inference]
---

```{r include=FALSE}
library(reticulate)
use_python('/Users/joy/miniconda3/bin/python')
```

```{python}
import numpy as np
import pandas as pd
import scanpy as sc
```

```{python}
pbmc = sc.read_10x_mtx('filtered_gene_bc_matrices/hg19/',
                       var_names = 'gene_symbols',
                       cache = True)
```

```{python}
pbmc.var_names_make_unique()
```

```{python}
pbmc
```

### Pre-processing: QC

Identify mitochondiral specific genes

```{python}
pbmc.var['mt'] = pbmc.var_names.str.startswith('MT-') 
sc.pp.calculate_qc_metrics(pbmc, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)
```

Visualize the QC metrics

```{python}
sc.pl.violin(pbmc, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt'],
             jitter=0.4, multi_panel=True, size = 1.5)
```

```{python}
sc.pl.scatter(pbmc, x='total_counts', y='pct_counts_mt')
sc.pl.scatter(pbmc, x='total_counts', y='n_genes_by_counts')
```

Filter out cells that have <200 or > 2500 genes.

```{python}
sc.pp.filter_cells(pbmc, min_genes = 200)
sc.pp.filter_cells(pbmc, max_genes = 2500)
pbmc = pbmc[pbmc.obs.pct_counts_mt < 5, :]
```

```{python}
pbmc
```

### Normalize & log-transform

```{python}
sc.pp.normalize_total(pbmc, target_sum=1e4)
```

```{python}
sc.pp.log1p(pbmc)
```

### Feature Selection

```{python}
sc.pp.highly_variable_genes(pbmc, min_mean=0.0125, max_mean=3, min_disp=0.5)
sc.pl.highly_variable_genes(pbmc)
```

```{python}
# filter to keep only HVGs
pbmc = pbmc[:, pbmc.var.highly_variable]
```

```{python}
pbmc
```

### Scale expression

```{python}
sc.pp.scale(pbmc, max_value = 10)
```

### PCA

```{python}
sc.tl.pca(pbmc, svd_solver='arpack')
sc.pl.pca(pbmc, color='NKG7')
```

```{python}
# Determining dimensionality
sc.pl.pca_variance_ratio(pbmc, log=True)
```

### tSNE

```{python}
sc.tl.tsne(pbmc, n_pcs = 10)
sc.pp.neighbors(pbmc, n_neighbors=10, n_pcs=10)
```

```{python}
sc.pl.tsne(pbmc)
```

### Clustering

```{python}
sc.tl.leiden(pbmc, resolution = 0.4)
```

```{python}
sc.pl.tsne(pbmc, color = 'leiden')
```

### Assign cell type identities

```{python}
new_cluster_names = [
    'Memory CD4 T', 'Naive CD4 T',
    'CD14 Monocytes',
    'B', 'CD8 T',
    'NK', 'FCGR3A Monocytes',
    'DC', 'Platelet']
pbmc.rename_categories('leiden', new_cluster_names)
pbmc.obs['clusters'] = pbmc.obs.leiden
```

```{python}
sc.pl.tsne(pbmc, color='clusters', legend_loc='on data')
```











