---
title: 'Analyzing single cell data: scanpy'
author: Joy Nyaanga
date: '2021-09-16'
draft: true
slug: scanpy
categories: 
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2021-09-16T20:51:42-05:00'
featured: no
image:
  caption: '[Photo by National Cancer Institute on Unsplash](https://unsplash.com/photos/bwMhq_itmMU?utm_source=unsplash&utm_medium=referral&utm_content=creditShareLink)'
  focal_point: ''
  preview_only: no
projects: [trajectory-inference]
---
This past summer, I was immersed in the world of single-cell genomics - a completely new field to me. With this came learning not only how data were experimentally collected, but also how to computationally process these data. 
  
Although much of my work was performed in Python, I dabbled a bit in the R tools for exploring single-cell RNA-seq data. As such, this will be part 1 of a two part series on basics of handling single-cell data. Here I intend to discuss some basics of `Scanpy`: a Python-based toolkit for handling large single-cell expression datasets.   

[`Scanpy`](https://scanpy.readthedocs.io/en/stable/) contains various functions for the preprocessing, visualization, clustering, trajectory inference, and differential expression testing of single-cell gene expression data. It is built joinly with [`anndata`](https://anndata.readthedocs.io/en/latest/) which allows for simple tracking of single-cell data and associated metadata. Typically, I interface with Python and `Scanpy` with `jupyterlab` but in this post I use Rmarkdown to run Python code (see previous [post](/post/r-python) if you're curious how this is done).  

## Set Up   
```{r include=-2}
library(reticulate)
use_python('/Users/joy/miniconda3/bin/python')
```

Loading necessary python packages
```{python}
import numpy as np
import pandas as pd
import scanpy as sc
```

In this post I will analyze a freely available dataset from 10X genomics. This dataset contains information from 2,700 single Peripheral Blood Mononuclear cells (PBMCs) that were sequenced on the Illumina NextSeq 500. You can download the raw data [here](https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz).  
  
```{python}
pbmc = sc.read_10x_mtx('filtered_gene_bc_matrices/hg19/',
                       var_names = 'gene_symbols',
                       cache = True)
```

The first step is to 
```{python}
pbmc.var_names_make_unique()
```

```{python}
pbmc
```

## Pre-processing: QC

Identify mitochondiral specific genes

```{python}
pbmc.var['mt'] = pbmc.var_names.str.startswith('MT-') 
sc.pp.calculate_qc_metrics(pbmc, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)
```

Visualize the QC metrics

```{python}
sc.pl.violin(pbmc, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt'],
             jitter=0.4, multi_panel=True, size = 1.5)
```

```{python}
sc.pl.scatter(pbmc, x='total_counts', y='pct_counts_mt')
sc.pl.scatter(pbmc, x='total_counts', y='n_genes_by_counts')
```

Filter out cells that have <200 or > 2500 genes.

```{python}
sc.pp.filter_cells(pbmc, min_genes = 200)
sc.pp.filter_cells(pbmc, max_genes = 2500)
pbmc = pbmc[pbmc.obs.pct_counts_mt < 5, :]
```

```{python}
pbmc
```

### Normalize & log-transform

```{python}
sc.pp.normalize_total(pbmc, target_sum=1e4)
```

```{python}
sc.pp.log1p(pbmc)
```

### Feature Selection

```{python}
sc.pp.highly_variable_genes(pbmc, min_mean=0.0125, max_mean=3, min_disp=0.5)
sc.pl.highly_variable_genes(pbmc)
```

```{python}
# filter to keep only HVGs
pbmc = pbmc[:, pbmc.var.highly_variable]
```

```{python}
pbmc
```

### Scale expression

```{python}
sc.pp.scale(pbmc, max_value = 10)
```

### PCA

```{python}
sc.tl.pca(pbmc, svd_solver='arpack')
sc.pl.pca(pbmc, color='NKG7')
```

```{python}
# Determining dimensionality
sc.pl.pca_variance_ratio(pbmc, log=True)
```

### tSNE

```{python}
sc.tl.tsne(pbmc, n_pcs = 10)
sc.pp.neighbors(pbmc, n_neighbors=10, n_pcs=10)
```

```{python}
sc.pl.tsne(pbmc)
```

### Clustering

```{python}
sc.tl.leiden(pbmc, resolution = 0.4)
```

```{python}
sc.pl.tsne(pbmc, color = 'leiden')
```

### Assign cell type identities

```{python}
new_cluster_names = [
    'Memory CD4 T', 'Naive CD4 T',
    'CD14 Monocytes',
    'B', 'CD8 T',
    'NK', 'FCGR3A Monocytes',
    'DC', 'Platelet']
pbmc.rename_categories('leiden', new_cluster_names)
pbmc.obs['clusters'] = pbmc.obs.leiden
```

```{python}
sc.pl.tsne(pbmc, color='clusters', legend_loc='on data')
```











